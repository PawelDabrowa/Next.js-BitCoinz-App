{"ast":null,"code":"var _jsxFileName = \"/Users/fox/Documents/Next/bitcoin-app/pages/progressbar.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useLayoutEffect, useRef } from \"react\";\nimport \"../Bar.css\";\nimport { CheckMark, Close } from \"./icons\";\n\nfunction App() {\n  _s();\n\n  var _useState = useState(0),\n      progress = _useState[0],\n      setProgress = _useState[1];\n\n  var articleRef = useRef();\n  useLayoutEffect(function () {\n    var updateHeight = function updateHeight() {\n      if (!articleRef.current) return;\n\n      var _articleRef$current$g = articleRef.current.getBoundingClientRect(),\n          height = _articleRef$current$g.height;\n\n      setProgress(window.scrollY / (height - window.innerHeight));\n    };\n\n    updateHeight();\n    window.addEventListener(\"scroll\", updateHeight);\n    return function () {\n      window.removeEventListener(\"scroll\", updateHeight);\n    };\n  }, []);\n  var position = Math.max(1 - progress, 0);\n  var complete = position === 0;\n  var notMoved = position === 1; // Radius is derived from our desired strokeWidth\n  // If radius is exactly half diameter then the stroke will sit right on the edge and expand in both directions\n  // We want it to sit on the inside so we need to do some offset. So half the stroke width we need to subtract from the radius\n  // If we wanted it on the outside we could add the stroke width but then you'll need to adjust your circle size to be that much larger\n\n  var DIAMETER = 50;\n  var STROKE_WIDTH = 6;\n  var RADIUS = DIAMETER / 2 - STROKE_WIDTH / 2;\n  var CIRCUMFERENCE = Math.PI * RADIUS * 2;\n  return __jsx(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"article\",\n    ref: articleRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    style: {\n      position: \"fixed\",\n      top: \"30px\",\n      right: \"30px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, __jsx(\"button\", {\n    className: \"button\",\n    style: {\n      backgroundColor: complete ? \"tomato\" : \"#FFF\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, complete ? __jsx(CheckMark, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 25\n    }\n  }) : __jsx(Close, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 41\n    }\n  }), !notMoved && __jsx(\"svg\", {\n    viewBox: \"0 0 50 50\",\n    width: \"100px\",\n    height: \"100px\",\n    className: \"circle-progress\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 15\n    }\n  }, __jsx(\"circle\", {\n    cx: DIAMETER / 2,\n    cy: DIAMETER / 2,\n    r: RADIUS,\n    stroke: \"tomato\",\n    fill: \"transparent\",\n    strokeWidth: STROKE_WIDTH,\n    style: {\n      strokeDasharray: CIRCUMFERENCE,\n      strokeDashoffset: CIRCUMFERENCE * position\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }))))));\n}\n\n_s(App, \"xyOpG6Nh1OTC/BM78AS3Qom7KGk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/fox/Documents/Next/bitcoin-app/pages/progressbar.js"],"names":["React","useState","useLayoutEffect","useRef","CheckMark","Close","App","progress","setProgress","articleRef","updateHeight","current","getBoundingClientRect","height","window","scrollY","innerHeight","addEventListener","removeEventListener","position","Math","max","complete","notMoved","DIAMETER","STROKE_WIDTH","RADIUS","CIRCUMFERENCE","PI","top","right","backgroundColor","strokeDasharray","strokeDashoffset"],"mappings":"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","sourcesContent":["import React, { useState, useLayoutEffect, useRef } from \"react\";\nimport \"../Bar.css\";\nimport { CheckMark, Close } from \"./icons\";\n\nfunction App() {\n  const [progress, setProgress] = useState(0);\n  const articleRef = useRef();\n\n  useLayoutEffect(() => {\n    const updateHeight = () => {\n      if (!articleRef.current) return;\n\n      const { height } = articleRef.current.getBoundingClientRect();\n\n      setProgress(window.scrollY / (height - window.innerHeight));\n    };\n\n    updateHeight();\n\n    window.addEventListener(\"scroll\", updateHeight);\n    return () => {\n      window.removeEventListener(\"scroll\", updateHeight);\n    };\n  }, []);\n\n  const position = Math.max(1 - progress, 0);\n  const complete = position === 0;\n  const notMoved = position === 1;\n\n  // Radius is derived from our desired strokeWidth\n  // If radius is exactly half diameter then the stroke will sit right on the edge and expand in both directions\n  // We want it to sit on the inside so we need to do some offset. So half the stroke width we need to subtract from the radius\n  // If we wanted it on the outside we could add the stroke width but then you'll need to adjust your circle size to be that much larger\n  const DIAMETER = 50;\n  const STROKE_WIDTH = 6;\n  const RADIUS = DIAMETER / 2 - STROKE_WIDTH / 2;\n  const CIRCUMFERENCE = Math.PI * RADIUS * 2;\n\n  return (\n    <div className=\"App\">\n      <div className=\"article\" ref={articleRef}>\n        <div\n          style={{\n            position: \"fixed\",\n            top: \"30px\",\n            right: \"30px\"\n          }}\n        >\n          <button\n            className=\"button\"\n            style={{\n              backgroundColor: complete ? \"tomato\" : \"#FFF\"\n            }}\n          >\n            {complete ? <CheckMark /> : <Close />}\n            {!notMoved && (\n              <svg\n                viewBox=\"0 0 50 50\"\n                width=\"100px\"\n                height=\"100px\"\n                className=\"circle-progress\"\n              >\n                <circle\n                  cx={DIAMETER / 2}\n                  cy={DIAMETER / 2}\n                  r={RADIUS}\n                  stroke=\"tomato\"\n                  fill=\"transparent\"\n                  strokeWidth={STROKE_WIDTH}\n                  style={{\n                    strokeDasharray: CIRCUMFERENCE,\n                    strokeDashoffset: CIRCUMFERENCE * position\n                  }}\n                />\n              </svg>\n            )}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}