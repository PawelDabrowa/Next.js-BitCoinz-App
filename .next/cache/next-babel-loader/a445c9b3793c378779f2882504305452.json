{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/fox/Documents/Next/bitcoin-app/pages/canvas.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, createRef } from 'react';\nimport { ScrollableCanvas } from './react-scrollable-canvas';\nvar WIDTH = 300;\nvar HEIGHT = 300;\nvar LARGE_WIDTH = 600;\nvar LARGE_HEIGHT = 600;\nvar CIRCLE_RADIUS = 5;\nvar CIRCLE_SIZE = 30;\n\nvar ScrollableCanvasExample = /*#__PURE__*/function (_Component) {\n  _inherits(ScrollableCanvasExample, _Component);\n\n  var _super = _createSuper(ScrollableCanvasExample);\n\n  function ScrollableCanvasExample() {\n    var _this;\n\n    _classCallCheck(this, ScrollableCanvasExample);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"canvasRef\", /*#__PURE__*/createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"ctx\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"draw\", function (scrollTop, scrollLeft) {\n      // draw canvas here.\n      _this.ctx.clearRect(0, 0, WIDTH, HEIGHT);\n\n      for (var y = -scrollTop % CIRCLE_SIZE; y < HEIGHT - scrollTop % CIRCLE_SIZE; y += CIRCLE_SIZE) {\n        for (var x = -scrollLeft % CIRCLE_SIZE; x < WIDTH - scrollLeft % CIRCLE_SIZE; x += CIRCLE_SIZE) {\n          _this.ctx.beginPath();\n\n          _this.ctx.arc(x + CIRCLE_SIZE / 2, y + CIRCLE_SIZE / 2, CIRCLE_RADIUS, 0, 360, false);\n\n          _this.ctx.fillStyle = \"rgba(\".concat((scrollLeft + x) / 2, \", \").concat((scrollTop + y) / 2, \", 128, 0.8)\");\n\n          _this.ctx.fill();\n        }\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(ScrollableCanvasExample, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.ctx = this.canvasRef.current.getContext('2d');\n      this.draw(0, 0);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(ScrollableCanvas, {\n        width: WIDTH,\n        height: HEIGHT,\n        largeWidth: LARGE_WIDTH,\n        largeHeight: LARGE_HEIGHT,\n        canvasRef: this.canvasRef,\n        onScroll: this.draw,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return ScrollableCanvasExample;\n}(Component);\n\nexport { ScrollableCanvasExample as default };","map":{"version":3,"sources":["/Users/fox/Documents/Next/bitcoin-app/pages/canvas.js"],"names":["React","Component","createRef","ScrollableCanvas","WIDTH","HEIGHT","LARGE_WIDTH","LARGE_HEIGHT","CIRCLE_RADIUS","CIRCLE_SIZE","ScrollableCanvasExample","scrollTop","scrollLeft","ctx","clearRect","y","x","beginPath","arc","fillStyle","fill","canvasRef","current","getContext","draw"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AAEA,IAAMC,KAAK,GAAG,GAAd;AACA,IAAMC,MAAM,GAAG,GAAf;AACA,IAAMC,WAAW,GAAG,GAApB;AACA,IAAMC,YAAY,GAAG,GAArB;AACA,IAAMC,aAAa,GAAG,CAAtB;AACA,IAAMC,WAAW,GAAG,EAApB;;IAEqBC,uB;;;;;;;;;;;;;;;;6EACPR,SAAS,E;;0DACf,I;;2DAEC,UAACS,SAAD,EAAYC,UAAZ,EAA2B;AAChC;AACA,YAAKC,GAAL,CAASC,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,EAAyBV,KAAzB,EAAgCC,MAAhC;;AACA,WAAK,IAAIU,CAAC,GAAG,CAACJ,SAAD,GAAaF,WAA1B,EAAuCM,CAAC,GAAGV,MAAM,GAAIM,SAAS,GAAGF,WAAjE,EAA+EM,CAAC,IAAIN,WAApF,EAAiG;AAC/F,aAAK,IAAIO,CAAC,GAAG,CAACJ,UAAD,GAAcH,WAA3B,EAAwCO,CAAC,GAAGZ,KAAK,GAAIQ,UAAU,GAAGH,WAAlE,EAAgFO,CAAC,IAAIP,WAArF,EAAkG;AAChG,gBAAKI,GAAL,CAASI,SAAT;;AACA,gBAAKJ,GAAL,CAASK,GAAT,CAAaF,CAAC,GAAGP,WAAW,GAAG,CAA/B,EAAkCM,CAAC,GAAGN,WAAW,GAAG,CAApD,EAAuDD,aAAvD,EAAsE,CAAtE,EAAyE,GAAzE,EAA8E,KAA9E;;AACA,gBAAKK,GAAL,CAASM,SAAT,kBAA6B,CAACP,UAAU,GAAGI,CAAd,IAAmB,CAAhD,eAAsD,CAACL,SAAS,GAAGI,CAAb,IAAkB,CAAxE;;AACA,gBAAKF,GAAL,CAASO,IAAT;AACD;AACF;AACF,K;;;;;;;wCAEmB;AAClB,WAAKP,GAAL,GAAW,KAAKQ,SAAL,CAAeC,OAAf,CAAuBC,UAAvB,CAAkC,IAAlC,CAAX;AACA,WAAKC,IAAL,CAAU,CAAV,EAAa,CAAb;AACD;;;6BAEQ;AACP,aACE,MAAC,gBAAD;AACE,QAAA,KAAK,EAAEpB,KADT;AAEE,QAAA,MAAM,EAAEC,MAFV;AAGE,QAAA,UAAU,EAAEC,WAHd;AAIE,QAAA,WAAW,EAAEC,YAJf;AAKE,QAAA,SAAS,EAAE,KAAKc,SALlB;AAME,QAAA,QAAQ,EAAE,KAAKG,IANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAUD;;;;EAjCkDvB,S;;SAAhCS,uB","sourcesContent":["import React, { Component, createRef } from 'react';\nimport { ScrollableCanvas } from './react-scrollable-canvas';\n\nconst WIDTH = 300;\nconst HEIGHT = 300;\nconst LARGE_WIDTH = 600;\nconst LARGE_HEIGHT = 600;\nconst CIRCLE_RADIUS = 5;\nconst CIRCLE_SIZE = 30;\n\nexport default class ScrollableCanvasExample extends Component {\n  canvasRef = createRef();\n  ctx = null;\n\n  draw = (scrollTop, scrollLeft) => {\n    // draw canvas here.\n    this.ctx.clearRect(0, 0, WIDTH, HEIGHT);\n    for (let y = -scrollTop % CIRCLE_SIZE; y < HEIGHT - (scrollTop % CIRCLE_SIZE); y += CIRCLE_SIZE) {\n      for (let x = -scrollLeft % CIRCLE_SIZE; x < WIDTH - (scrollLeft % CIRCLE_SIZE); x += CIRCLE_SIZE) {\n        this.ctx.beginPath();\n        this.ctx.arc(x + CIRCLE_SIZE / 2, y + CIRCLE_SIZE / 2, CIRCLE_RADIUS, 0, 360, false);\n        this.ctx.fillStyle = `rgba(${(scrollLeft + x) / 2}, ${(scrollTop + y) / 2}, 128, 0.8)`;\n        this.ctx.fill();\n      }\n    }\n  };\n\n  componentDidMount() {\n    this.ctx = this.canvasRef.current.getContext('2d');\n    this.draw(0, 0);\n  }\n\n  render() {\n    return (\n      <ScrollableCanvas\n        width={WIDTH}\n        height={HEIGHT}\n        largeWidth={LARGE_WIDTH}\n        largeHeight={LARGE_HEIGHT}\n        canvasRef={this.canvasRef}\n        onScroll={this.draw}\n      />\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}